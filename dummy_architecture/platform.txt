# The purpose of this file is to demonstrate which properties are defined in each recipe and also where the hook recipes are called
# The dummy recipe.preproc.macros causes compilation to fail on IDE versions previous to 1.9.0-beta so the stock recipe must be used for those versions

# For more info:
# https://arduino.github.io/arduino-cli/dev/platform-specification/

name=InoPlatformPropertiesTest
version=1.0.0


dummy_platform_property=dummy_platform_property_value
tools.dummy_tool.dummy_tool_property=dummy_tool_property_value
dummy_override_property=dummy_override_property_value_platform

# Properties defined in platform.txt are only accessible in tool recipes if prepended by the tool name, thus the matched definitions of each of the properties used by both the compilation recipe and tool patterns.
tools.dummy_tool.scripts.path={runtime.platform.path}/scripts
scripts.path={tools.dummy_tool.scripts.path}

dummy_preproc_macros_command={scripts.path}/dummy_preproc_macros_command.sh
dummy_preproc_macros_command.windows={scripts.path}/dummy_preproc_macros_command.bat

tools.dummy_tool.dummy_cmd={scripts.path}/dummy_program.sh
tools.dummy_tool.dummy_cmd.windows={scripts.path}/dummy_program.bat
dummy_cmd={tools.dummy_tool.dummy_cmd}

# This default definition is required for precompiled library support. It will be overridden by the builder when compiling a precompiled library.
# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#recipes-for-linking
compiler.libraries.ldflags=

# Used to set the value of the compiler.optimization_flags property according to the optimization setting of the development software:
# arduino-cli compile --optimize-for-debug
# (Arduino Pro IDE) Sketch > Optimize for Debugging
# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#sketch-debugging-configuration
compiler.optimization_flags.debug=compiler_optimization_flags_debug_value
compiler.optimization_flags.release=compiler_optimization_flags_release_value

tools.dummy_tool.properties_list=software={software} name={name} _id={_id} extra.time.utc={extra.time.utc} extra.time.local={extra.time.local} extra.time.zone={extra.time.zone} extra.time.dst={extra.time.dst} runtime.platform.path={runtime.platform.path} runtime.hardware.path={runtime.hardware.path} runtime.ide.path={runtime.ide.path} runtime.ide.version={runtime.ide.version} ide_version={ide_version} runtime.os={runtime.os} build.path={build.path} build.project_name={build.project_name} build.arch={build.arch} build.core={build.core} build.core.path={build.core.path} build.system.path={build.system.path} build.fqbn={build.fqbn} build.variant={build.variant} build.variant.path={build.variant.path} build.source.path={build.source.path} build.library_discovery_phase={build.library_discovery_phase} includes={includes} source_file={source_file} object_file={object_file} archive_file_path={archive_file_path} archive_file={archive_file} object_files={object_files} preprocessed_file_path={preprocessed_file_path} sketch_path={sketch_path} compiler.libraries.ldflags={compiler.libraries.ldflags} compiler.optimization_flags={compiler.optimization_flags} upload.verbose={upload.verbose} upload.verify={upload.verify} serial.port={serial.port} serial.port.file={serial.port.file} program.verbose={program.verbose} program.verify={program.verify} program.extra_params={program.extra_params} erase.verbose={erase.verbose}  erase.verify={erase.verify} bootloader.verbose={bootloader.verbose} bootloader.verify={bootloader.verify} upload.network.port={upload.network.port} upload.network.endpoint_upload={upload.network.endpoint_upload} upload.network.endpoint_sync={upload.network.endpoint_sync} upload.network.endpoint_reset={upload.network.endpoint_reset} upload.network.sync_return={upload.network.sync_return} interpreter={interpreter} dummy_boards_property={dummy_boards_property} dummy_boards_local_property={dummy_boards_local_property} dummy_programmer_property={dummy_programmer_property} dummy_platform_property={dummy_platform_property} dummy_platform_local_property={dummy_platform_local_property} dummy_tool_property={dummy_tool_property} dummy_tool_local_property={dummy_tool_local_property} dummy_override_property={dummy_override_property} dummy_option_property={dummy_option_property}
properties_list={tools.dummy_tool.properties_list}

# Dedicated recipe to demonstrate visibility of properties in boards.txt
recipe.hooks.sketch.prebuild.0.pattern="{dummy_cmd}" dummy_board_property_list={dummy_board_property_list}


# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#pre-and-post-build-hooks-since-arduino-ide-165
recipe.hooks.sketch.prebuild.1.pattern="{dummy_cmd}" recipe=recipe.hooks.sketch.prebuild.1.pattern {properties_list}
recipe.hooks.sketch.postbuild.1.pattern="{dummy_cmd}" recipe=recipe.hooks.sketch.postbuild.1.pattern {properties_list}
recipe.hooks.libraries.prebuild.1.pattern="{dummy_cmd}" recipe=recipe.hooks.libraries.prebuild.1.pattern {properties_list}
recipe.hooks.libraries.postbuild.1.pattern="{dummy_cmd}" recipe=recipe.hooks.libraries.postbuild.1.pattern {properties_list}
recipe.hooks.core.prebuild.1.pattern="{dummy_cmd}" recipe=recipe.hooks.core.prebuild.1.pattern {properties_list}
recipe.hooks.core.postbuild.1.pattern="{dummy_cmd}" recipe=recipe.hooks.core.postbuild.1.pattern {properties_list}
recipe.hooks.linking.prelink.1.pattern="{dummy_cmd}" recipe=recipe.hooks.linking.prelink.1.pattern {properties_list}
recipe.hooks.linking.postlink.1.pattern="{dummy_cmd}" recipe=recipe.hooks.linking.postlink.1.pattern {properties_list}
recipe.hooks.objcopy.preobjcopy.1.pattern="{dummy_cmd}" recipe=recipe.hooks.objcopy.preobjcopy.1.pattern {properties_list}
recipe.hooks.objcopy.postobjcopy.1.pattern="{dummy_cmd}" recipe=recipe.hooks.objcopy.postobjcopy.1.pattern {properties_list}
recipe.hooks.savehex.presavehex.1.pattern="{dummy_cmd}" recipe=recipe.hooks.savehex.presavehex.1.pattern {properties_list}
recipe.hooks.savehex.postsavehex.1.pattern="{dummy_cmd}" recipe=recipe.hooks.savehex.postsavehex.1.pattern {properties_list}


# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#build-process
recipe.c.o.pattern="{dummy_cmd}" recipe=recipe.c.o.pattern {properties_list}
recipe.cpp.o.pattern="{dummy_cmd}" recipe=recipe.cpp.o.pattern {properties_list}
recipe.S.o.pattern="{dummy_cmd}" recipe=recipe.S.o.pattern {properties_list}
recipe.ar.pattern="{dummy_cmd}" recipe=recipe.ar.pattern {properties_list}
recipe.c.combine.pattern="{dummy_cmd}" recipe=recipe.c.combine.pattern {properties_list}
recipe.objcopy.eep.pattern="{dummy_cmd}" recipe=recipe.objcopy.eep.pattern {properties_list}
recipe.objcopy.hex.pattern="{dummy_cmd}" recipe=recipe.objcopy.hex.pattern {properties_list}
recipe.size.pattern="{dummy_cmd}" recipe=recipe.size.pattern {properties_list}
recipe.preproc.includes="{dummy_cmd}" recipe=recipe.preproc.includes {properties_list}


# Using avr-g++ for the library dependency resolution process because mocking this is too difficult.
compiler.path={runtime.tools.avr-gcc.path}/bin/
compiler.cpp.cmd=avr-g++
preproc.macros.flags=-w -x c++ -E -CC
preproc.macros.cmd="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} {includes} "{source_file}" -o "{preprocessed_file_path}"
# Because the wrapper script only should run {preproc.macros.cmd}, a key (START_PLATFORM_PROPERTIES_LIST) is used to determine where the command arguments end.
recipe.preproc.macros="{dummy_preproc_macros_command}" {preproc.macros.cmd} START_PLATFORM_PROPERTIES_LIST recipe=recipe.preproc.macros {properties_list}


# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#recipes-to-export-compiled-binary
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex


# https://arduino.github.io/arduino-cli/dev/platform-specification/#recipes-to-compute-binary-sketch-size
recipe.size.regex=^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*


# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#tools
tools.dummy_tool.network_cmd="{dummy_cmd}" recipe=tools.dummy_tool.network_cmd {properties_list}

# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#verbose-parameter
tools.dummy_tool.upload.params.verbose=upload_verbose_verbose_option
tools.dummy_tool.upload.params.quiet=upload_verbose_quiet_option
# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#upload-verification
tools.dummy_tool.upload.params.verify=upload_verify_verify_option
tools.dummy_tool.upload.params.noverify=upload_verify_noverify_option
tools.dummy_tool.upload.pattern="{dummy_cmd}" recipe=tools.dummy_tool.upload.pattern {properties_list}

tools.dummy_tool.program.params.verbose=program_verbose_verbose_option
tools.dummy_tool.program.params.quiet=program_verbose_quiet_option
tools.dummy_tool.program.params.verify=program_verify_verify_option
tools.dummy_tool.program.params.noverify=program_verify_noverify_option
tools.dummy_tool.program.pattern="{dummy_cmd}" recipe=tools.dummy_tool.program.pattern {properties_list} dummy_programmer_property_list={dummy_programmer_property_list}

tools.dummy_tool.erase.params.verbose=erase_verbose_verbose_option
tools.dummy_tool.erase.params.quiet=erase_verbose_quiet_option
# erase.verify is not supported (Arduino CLI @3775f51)
tools.dummy_tool.erase.params.verify=erase_verify_verify_option
tools.dummy_tool.erase.params.noverify=erase_verify_noverify_option
tools.dummy_tool.erase.pattern="{dummy_cmd}" recipe=tools.dummy_tool.erase.pattern {properties_list}

tools.dummy_tool.bootloader.params.verbose=bootloader_verbose_verbose_option
tools.dummy_tool.bootloader.params.quiet=bootloader_verbose_quiet_option
# bootloader.verify is not supported (Arduino CLI @3775f51)
tools.dummy_tool.bootloader.params.verify=bootloader_verify_verify_option
tools.dummy_tool.bootloader.params.noverify=bootloader_verify_noverify_option
tools.dummy_tool.bootloader.pattern="{dummy_cmd}" recipe=tools.dummy_tool.bootloader.pattern {properties_list}

tools.dummy_tool_remote.upload.pattern="{dummy_cmd}" recipe=tools.dummy_tool_remote.upload.pattern {properties_list}

tools.dummy_tool.upload.network_pattern="{dummy_cmd}" recipe=tools.dummy_tool.upload.network_pattern {properties_list}


# See: https://arduino.github.io/arduino-cli/dev/platform-specification/#sketch-debugging-configuration
tools.dummy_debug_tool.debug.pattern="{dummy_cmd}" recipe=tools.dummy_tool.program.pattern {properties_list}
