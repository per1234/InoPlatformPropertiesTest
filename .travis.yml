# This file is used to configure the Travis CI tests for this repository

matrix:
  include:

    # Check all the files in the repository for consistent formatting
    - name: 'File Formatting Checks'
      language: minimal
      script:
        # Check for UTF-8 BOM file encoding
        - find . -path './.git' -prune -or -type f -exec grep --files-with-matches --binary-files=without-match $'\xEF\xBB\xBF' '{}' \; -exec echo 'UTF-8 BOM encoding detected.' \; -exec false '{}' +
        # Check for files starting with a blank line
        - find . -path ./.git -prune -o -type f -print0 | xargs -0 -L1 bash -c 'head -1 "$0" | grep --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at start of $0."; false; fi'
        # Check for tabs
        - "if grep --line-number --recursive --binary-files=without-match --exclude-dir=.git --regexp=$'\t' .; then echo 'Tab found.'; false; fi"
        # Check for trailing whitespace
        - "if grep --line-number --recursive --binary-files=without-match --exclude-dir=.git --regexp='[[:blank:]]$' .; then echo 'Trailing whitespace found.'; false; fi"
        # Check for non-Unix line endings
        - "if grep --files-with-matches --recursive --binary-files=without-match --exclude-dir=.git --regexp=$'\r$' .; then echo 'Non-Unix EOL detected.'; false; fi"
        # Check for blank lines at end of files
        - find . -path ./.git -prune -o -type f -print0 | xargs -0 -L1 bash -c 'tail -1 "$0" | grep --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at end of $0."; false; fi'
        # Check for files that don't end in a newline (https://stackoverflow.com/a/25686825)
        - find . -path ./.git -prune -o -type f -print0 | xargs -0 -L1 bash -c 'if test "$(tail --bytes=1 "$0")"; then echo "No new line at end of $0."; false; fi'


    # Check all files in the repository for commonly misspelled words
    - name: 'Spell Check'
      language: python
      python: 3.6
      install:
        # Install codespell
        # https://github.com/codespell-project/codespell
        - pip install codespell

      script:
        - codespell --skip="${TRAVIS_BUILD_DIR}/.git" "${TRAVIS_BUILD_DIR}"


    # Use the Arduino IDE to compile for each of the boards
    - name: 'Compilation Test'
      language: generic
      install:
        - git clone https://github.com/per1234/arduino-ci-script.git "${HOME}/scripts/arduino-ci-script"
        - cd "${HOME}/scripts/arduino-ci-script"
        # Get new tags from the remote
        - git fetch --tags
        # Checkout the latest tag
        - git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
        - source "${HOME}/scripts/arduino-ci-script/arduino-ci-script.sh"

        # These functions can be used to get verbose output for debugging the script
        # set_script_verbosity can be set to values from 0 - 2 (verbosity off - maximum verbosity)
        #- set_script_verbosity 1
        # Setting set_verbose_output_during_compilation to true is the same as File > Preferences > Show verbose output during > compilation (check) in the Arduino IDE
        #- set_verbose_output_during_compilation 'true'

        - set_application_folder "${HOME}/arduino-ide"
        - set_sketchbook_folder "${HOME}/Arduino"

        # Install newest release of the Arduino IDE
        - install_ide "newest"

        # Install the InoPlatformPropertiesTest boards platform from the repository
        - install_package

      script:
        # Compile all example sketches of the libraries bundled with InoPlatformPropertiesTest for the dummy board with all installed versions of the Arduino IDE
        - build_sketch "${TRAVIS_BUILD_DIR}/dummy_architecture/libraries" 'InoPlatformPropertiesTest:dummy_architecture:dummy_board' 'false' "all"


notifications:
  email:
    on_success: always
    on_failure: always
  webhooks:
    urls:
      # Use TravisBuddy to automatically comment on any pull request that results in a failing CI build
      - https://www.travisbuddy.com/
    on_success: never
    on_failure: always
